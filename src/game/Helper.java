package game;

import java.util.Random;
import java.util.Scanner;

public class Helper {
    public String programName = "CARD DUELS";
    public static String[] monsterNames = {
            "Mistwings",
            "Tombbeast",
            "Murkhood",
            "The Hollow Wraith",
            "The Acidic Hag",
            "The Infamous Eyes",
            "The Stalking Frost Spider",
            "The Grisly Killer Monkey",
            "The Greater Storm Serpent",
            "The Disfigured Entity"
        };
    
    public static String[] magicianNames = {
            "izelin",
            "uleus",
            "ivexium",
            "eqihr",
            "ikius",
            "oras",
            "hudarin",
            "uzitarum",
    	};
   
    public static String[] trapCardsNames = {
            "Chipper",
            "Twilight",
            "Aeolus",
            "Calimerio",
            "Lanstrom",
            "Mystic",
            "Snow",
            "Giddy",
    };
        public Scanner console = new Scanner(System.in);

        /**
         * This method will facilitate easier System.out.
         * @param o - Object.
         */
        public static void out(Object o){
    	    System.out.println(o.toString());
        }

        /**
         * This method will return the games instructions when called. 
         * @return a String.
         */
        public String instruction() {
            return 
                    "*********************************************" + "\n" +
                    "The Goal to play is to first choose your player" + "\n"
                  + "Then 5 cards will be generated by different sets of Monster, Trap, or Magician Card" + "\n"
                  + "Pick a battle with the player that your against with and draw a card to play" + "\n" 
                  + "The player with the most amount of cards win! ...." + "\n"
                  + "*********************************************"
                  ;
        }

        public String generate(String[] n) {
            Random nameR = new Random();
            int r = nameR.nextInt(n.length);
            return n[r];
        }
        
        public int generateNum() {
            Random nums = new Random();
            int n = nums.nextInt(100);
            return n += 1;
        }
        
        protected boolean generateAttack(Cards card_1, Cards card_2) {
        	card_1.setHealth(card_2.getHealth() - (card_1.getDamage() - card_2.getDefence()));
        	
        	if (card_2.health <= 0) {
        		return true;
        	}
        	return false;
        }
        
        protected boolean generateTrapsAttack(Traps card_1, Traps card_2) {
        	card_1.setHealth(card_2.getHealth() - (card_1.getDamage() - card_2.getDefence()));
        	
        	if (card_2.health <= 0) {
        		return true;
        	}
        	return false;
        }
        
        protected boolean generateMagicianAttack(Magician card_1, Magician card_2) {
        	card_1.setHealth(card_2.getHealth() - (card_1.getDamage() - card_2.getDefence()));
        	
        	if (card_2.health <= 0) {
        		return true;
        	}
        	return false;
        }
        
        protected int checkStatement(int statement) {
    		if (statement == 1) {
    			return 1;
    		} else if (statement == 2) {
    			return 2;
    		}
    		return 3;
    	}
}
